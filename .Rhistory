ggtitle("Gráfico de Barras de Education") +
xlab("Nivel de Educación") +
ylab("Frecuencia")
# Calcular los porcentajes de frecuencia de cada ciudad
library(ggplot2)
city_data <- as.data.frame(table(datos$City))
city_data$Percentage <- city_data$Freq / sum(city_data$Freq) * 100
# Crear el gráfico de barras con porcentajes usando ggplot2
ggplot(city_data, aes(x = reorder(Var1, -Freq), y = Freq, label = paste0(round(Percentage, 1), "%"))) +
geom_bar(stat = "identity", fill = "cadetblue") +
geom_text(size = 3, position = position_stack(vjust = 0.5), color = "black") +
ggtitle("Gráfico de Barras de City") +
xlab("Ciudad") +
ylab("Frecuencia") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotating x-axis labels for better visibility
# Calcular los porcentajes de frecuencia de cada género
library(ggplot2)
gender_data <- as.data.frame(table(datos$Gender))
gender_data$Percentage <- gender_data$Freq / sum(gender_data$Freq) * 100
# Crear el gráfico de barras con porcentajes usando ggplot2
ggplot(gender_data, aes(x = Var1, y = Freq, label = paste0(round(Percentage, 1), "%"))) +
geom_bar(stat = "identity", fill = "orchid") +
geom_text(size = 3, position = position_stack(vjust = 0.5), color = "black") +
ggtitle("Gráfico de Barras de Gender") +
xlab("Género") +
ylab("Frecuencia")
# Calcular los porcentajes de frecuencia de cada categoría de EverBenched
library(ggplot2)
everbenched_data <- as.data.frame(table(datos$EverBenched))
everbenched_data$Percentage <- everbenched_data$Freq / sum(everbenched_data$Freq) * 100
# Crear el gráfico de barras con porcentajes usando ggplot2
ggplot(everbenched_data, aes(x = Var1, y = Freq, label = paste0(round(Percentage, 1), "%"))) +
geom_bar(stat = "identity", fill = "lightcoral") +
geom_text(size = 3, position = position_stack(vjust = 0.5), color = "black") +
ggtitle("Gráfico de Barras de EverBenched") +
xlab("Ha Sido Bencheado") +
ylab("Frecuencia")
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
url <- "https://raw.githubusercontent.com/chelocoder/ProyectoR/main/Employee.csv"
datos <- read.csv(url)
head(datos)
# Obtener estadísticos descriptivos
summary_stats <- summary(datos)
# Mostrar estadísticos descriptivos
print(summary_stats)
# Cargar la librería dplyr para manipulación de datos
suppressPackageStartupMessages(library(dplyr))
# Seleccionar solo las columnas numéricas
numeric_data <- datos %>%
select_if(is.numeric)
# Obtener los estadísticos descriptivos
summary_stats <- summary(numeric_data)
# Mostrar los estadísticos descriptivos
print(summary_stats)
# Obtener el valor mínimo
min <- min(datos$JoiningYear)
# Imprimir el valor mínimo de la columna
print(min)
# Obtener el primer cuartil
q1 <- quantile(datos$JoiningYear, 0.25)
# Imprimir el primer cuartil
print(q1)
# Calcular la mediana de la variable
mediana_joining_year <- median(datos$JoiningYear)
# Imprimir la mediana de la variable
print(mediana_joining_year)
# Obtener el tercer cuartil
q3 <- quantile(datos$JoiningYear, 0.75)
# Imprimir el tercer cuartil
print(q3)
# Calcular el valor máximo de la variable
max <- max(datos$JoiningYear)
# Imprimir el valor máximo de la variable
print(max)
# Calcular el rango de la variable
rango <- max(datos$JoiningYear) - min(datos$JoiningYear)
# Imprimir el rango de la variable "JoiningYear"
print(rango)
# Calcular la moda de la variable
moda <- as.numeric(names(sort(-table(datos$JoiningYear))[1]))
# Imprimir la moda de la variable
print(moda)
# Calcular la frecuencia de la variable
frecuencia <- table(datos$JoiningYear)
# Imprimir la frecuencia de la variable
print(frecuencia)
#Imprimir la frecuencia máxima
frecuencia_maxima <- max(frecuencia)
print(frecuencia_maxima)
# Obtener el valor mínimo
min <- min(datos$PaymentTier)
# Imprimir el valor mínimo de la columna
print(min)
# Obtener el primer cuartil
q1 <- quantile(datos$PaymentTier, 0.25)
# Imprimir el primer cuartil
print(q1)
# Calcular la mediana de la variable
mediana <- median(datos$PaymentTier)
# Imprimir la mediana de la variable
print(mediana)
# Obtener el tercer cuartil
q3 <- quantile(datos$PaymentTier, 0.75)
# Imprimir el tercer cuartil
print(q3)
# Calcular el valor máximo de la variable
max <- max(datos$PaymentTier)
# Imprimir el valor máximo de la variable
print(max)
# Calcular el rango de la variable
rango <- max(datos$PaymentTier) - min(datos$PaymentTier)
# Imprimir el rango de la variable
print(rango)
# Calcular la moda de la variable
moda <- as.numeric(names(sort(-table(datos$PaymentTier))[1]))
# Imprimir la moda de la variable
print(moda)
# Calcular la frecuencia de la variable
frecuencia <- table(datos$PaymentTier)
# Imprimir la frecuencia de la variable
print(frecuencia)
#Imprimir la frecuencia máxima
frecuencia_maxima <- max(frecuencia)
print(frecuencia_maxima)
# Obtener el valor mínimo
min <- min(datos$Age        )
# Imprimir el valor mínimo de la columna
print(min)
# Obtener el primer cuartil
q1 <- quantile(datos$Age        , 0.25)
# Imprimir el primer cuartil
print(q1)
# Calcular la mediana de la variable
mediana <- median(datos$Age)
# Imprimir la mediana de la variable
print(mediana)
# Obtener el tercer cuartil
q3 <- quantile(datos$PaymentTier, 0.75)
# Imprimir el tercer cuartil
print(q3)
# Calcular el valor máximo de la variable
max <- max(datos$Age        )
# Imprimir el valor máximo de la variable
print(max)
# Calcular el rango de la variable
rango <- max(datos$Age) - min(datos$Age)
# Imprimir el rango de la variable
print(rango)
# Calcular la moda de la variable
moda <- as.numeric(names(sort(-table(datos$Age))[1]))
# Imprimir la moda de la variable
print(moda)
# Calcular la frecuencia de la variable
frecuencia <- table(datos$Age)
# Imprimir la frecuencia de la variable
print(frecuencia)
#Imprimir la frecuencia máxima
frecuencia_maxima <- max(frecuencia)
print(frecuencia_maxima)
# Obtener el valor mínimo
min <- min(datos$ExperienceInCurrentDomain)
# Imprimir el valor mínimo de la columna
print(min)
# Obtener el primer cuartil
q1 <- quantile(datos$ExperienceInCurrentDomain, 0.25)
# Imprimir el primer cuartil
print(q1)
# Calcular la mediana de la variable
mediana <- median(datos$ExperienceInCurrentDomain)
# Imprimir la mediana de la variable
print(mediana)
# Obtener el tercer cuartil
q3 <- quantile(datos$ExperienceInCurrentDomain, 0.75)
# Imprimir el tercer cuartil
print(q3)
# Calcular el valor máximo de la variable
max <- max(datos$ExperienceInCurrentDomain)
# Imprimir el valor máximo de la variable
print(max)
# Calcular el rango de la variable
rango <- max(datos$ExperienceInCurrentDomain) - min(datos$ExperienceInCurrentDomain)
# Imprimir el rango de la variable
print(rango)
# Calcular la moda de la variable
moda <- as.numeric(names(sort(-table(datos$ExperienceInCurrentDomain))[1]))
# Imprimir la moda de la variable
print(moda)
# Calcular la frecuencia de la variable
frecuencia <- table(datos$ExperienceInCurrentDomain)
# Imprimir la frecuencia de la variable
print(frecuencia)
#Imprimir la frecuencia máxima
frecuencia_maxima <- max(frecuencia)
print(frecuencia_maxima)
# Obtener el valor mínimo
min <- min(datos$LeaveOrNot)
# Imprimir el valor mínimo de la columna
print(min)
# Obtener el primer cuartil
q1 <- quantile(datos$LeaveOrNot, 0.25)
# Imprimir el primer cuartil
print(q1)
# Calcular la mediana de la variable
mediana <- median(datos$LeaveOrNot)
# Imprimir la mediana de la variable
print(mediana)
# Obtener el tercer cuartil
q3 <- quantile(datos$LeaveOrNot, 0.75)
# Imprimir el tercer cuartil
print(q3)
# Calcular el valor máximo de la variable
max <- max(datos$LeaveOrNot)
# Imprimir el valor máximo de la variable
print(max)
# Calcular el rango de la variable
rango <- max(datos$LeaveOrNot) - min(datos$LeaveOrNot)
# Imprimir el rango de la variable
print(rango)
# Calcular la moda de la variable
moda <- as.numeric(names(sort(-table(datos$LeaveOrNot))[1]))
# Imprimir la moda de la variable
print(moda)
# Calcular la frecuencia de la variable
frecuencia <- table(datos$LeaveOrNot)
# Imprimir la frecuencia de la variable
print(frecuencia)
#Imprimir la frecuencia máxima
frecuencia_maxima <- max(frecuencia)
print(frecuencia_maxima)
# Seleccionar solo las columnas categóricas
categorical_data <- datos %>%
select_if(is.character)
# Obtener estadísticos descriptivos para las variables categóricas
summary_stats_categorical <- summary(categorical_data)
# Imprimir los estadísticos descriptivos
print(summary_stats_categorical)
# Calcular la frecuencia de cada valor en la variable categórica
frecuencia <- table(datos$Education)
# Imprimir los valores y sus frecuencias
print(frecuencia)
# Calcular la frecuencia de cada valor en la variable categórica
frecuencia <- table(datos$Education)
# Encontrar el valor que más se repite
valor_mas_repetido <- names(frecuencia)[which.max(frecuencia)]
# Imprimir el valor que más se repite
print(valor_mas_repetido)
# Calcular la frecuencia de cada valor en la variable categórica
frecuencia <- table(datos$City)
# Imprimir los valores y sus frecuencias
print(frecuencia)
# Calcular la frecuencia de cada valor en la variable categórica
frecuencia <- table(datos$City)
# Encontrar el valor que más se repite
valor_mas_repetido <- names(frecuencia)[which.max(frecuencia)]
# Imprimir el valor que más se repite
print(valor_mas_repetido)
# Calcular la frecuencia de cada valor en la variable categórica
frecuencia <- table(datos$Gender)
# Imprimir los valores y sus frecuencias
print(frecuencia)
# Calcular la frecuencia de cada valor en la variable categórica
frecuencia <- table(datos$Gender)
# Encontrar el valor que más se repite
valor_mas_repetido <- names(frecuencia)[which.max(frecuencia)]
# Imprimir el valor que más se repite
print(valor_mas_repetido)
# Calcular la frecuencia de cada valor en la variable categórica
frecuencia <- table(datos$EverBenched)
# Imprimir los valores y sus frecuencias
print(frecuencia)
# Calcular la frecuencia de cada valor en la variable categórica
frecuencia <- table(datos$EverBenched)
# Encontrar el valor que más se repite
valor_mas_repetido <- names(frecuencia)[which.max(frecuencia)]
# Imprimir el valor que más se repite
print(valor_mas_repetido)
# Seleccionar solo las columnas numéricas
numeric_data <- datos %>%
select_if(is.numeric)
# Calcular el rango
rango <- apply(numeric_data, 2, function(x) max(x) - min(x))
# Calcular la varianza
varianza <- apply(numeric_data, 2, var)
# Calcular la desviación estándar
desviacion_estandar <- apply(numeric_data, 2, sd)
# Crear un dataframe con los resultados
estadisticos_dispersion <- data.frame(
Variable = names(numeric_data),
Rango = rango,
Varianza = varianza,
Desviacion_Estandar = desviacion_estandar
)
# Imprimir los estadísticos de dispersión
print(estadisticos_dispersion)
# Conteo de datos faltantes en cada columna
missing_data_counts <- sapply(datos, function(x) sum(is.na(x)))
# Mostrando el conteo de datos faltantes
missing_data_counts
# Identificando variables numéricas
numeric_vars <- sapply(datos, function(x) is.numeric(x) || is.integer(x))
numeric_variables <- names(datos)[numeric_vars]
# Identificando variables categóricas
categorical_vars <- sapply(datos, function(x) is.factor(x) || is.character(x) || is.logical(x))
categorical_variables <- names(datos)[categorical_vars]
# Mostrando las variables numéricas y categóricas
list(numeric = numeric_variables, categorical = categorical_variables)
# Calcular los porcentajes de frecuencia de cada año
library(ggplot2)
joining_year_data <- as.data.frame(table(datos$JoiningYear))
joining_year_data$Percentage <- joining_year_data$Freq / sum(joining_year_data$Freq) * 100
# Crear el gráfico de barras con porcentajes usando ggplot2
ggplot(joining_year_data, aes(x = Var1, y = Freq, label = paste0(round(Percentage, 1), "%"))) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_text(size = 3, position = position_stack(vjust = 0.5), color = "black") +
ggtitle("Gráfico de Barras de JoiningYear") +
xlab("Año de Ingreso") +
ylab("Frecuencia")
# Calcular los porcentajes de frecuencia de cada categoría de PaymentTier
library(ggplot2)
payment_tier_data <- as.data.frame(table(datos$PaymentTier))
payment_tier_data$Percentage <- payment_tier_data$Freq / sum(payment_tier_data$Freq) * 100
# Crear el gráfico de barras con porcentajes usando ggplot2
ggplot(payment_tier_data, aes(x = Var1, y = Freq, label = paste0(round(Percentage, 1), "%"))) +
geom_bar(stat = "identity", fill = "coral") +
geom_text(size = 3, position = position_stack(vjust = 0.5), color = "black") +
ggtitle("Gráfico de Barras de PaymentTier") +
xlab("Tier de Pago") +
ylab("Frecuencia")
# Cargar la librería ggplot2
library(ggplot2)
# Crear un histograma usando ggplot2
ggplot(datos, aes(x = Age)) +
geom_histogram(binwidth = 2, fill="blue", color="black") +
ggtitle("Histograma de Age") +
xlab("Edad") +
ylab("Frecuencia")
# Cargar la librería ggplot2
library(ggplot2)
# Creando un box plot usando ggplot2
ggplot(datos, aes(y = Age)) +
geom_boxplot(fill = "lightgreen") +
ggtitle("Box Plot de Age") +
ylab("Edad")
# Calcular los porcentajes de frecuencia de cada valor de ExperienceInCurrentDomain
library(ggplot2)
experience_data <- as.data.frame(table(datos$ExperienceInCurrentDomain))
experience_data$Percentage <- experience_data$Freq / sum(experience_data$Freq) * 100
# Crear el gráfico de barras con porcentajes usando ggplot2
ggplot(experience_data, aes(x = Var1, y = Freq, label = paste0(round(Percentage, 1), "%"))) +
geom_bar(stat = "identity", fill = "lightblue") +
geom_text(size = 3, position = position_stack(vjust = 0.5), color = "black") +
ggtitle("Gráfico de Barras de ExperienceInCurrentDomain") +
xlab("Años de Experiencia en el Dominio Actual") +
ylab("Frecuencia")
# Calcular los porcentajes de frecuencia de cada categoría de LeaveOrNot
library(ggplot2)
leave_data <- as.data.frame(table(datos$LeaveOrNot))
leave_data$Percentage <- leave_data$Freq / sum(leave_data$Freq) * 100
# Crear el gráfico de barras con porcentajes usando ggplot2
ggplot(leave_data, aes(x = Var1, y = Freq, label = paste0(round(Percentage, 1), "%"))) +
geom_bar(stat = "identity", fill = "salmon") +
geom_text(size = 3, position = position_stack(vjust = 0.5), color = "black") +
ggtitle("Gráfico de Barras de LeaveOrNot") +
xlab("Decisión") +
ylab("Frecuencia")
# Identifying character variables
char_vars <- sapply(datos, class) == "character"
# Extracting unique values for each character variable
unique_values <- lapply(datos[, char_vars, drop = FALSE], unique)
# Displaying the unique values
unique_values
# Calcular los porcentajes de frecuencia de cada categoría de Education
library(ggplot2)
education_data <- as.data.frame(table(datos$Education))
education_data$Percentage <- education_data$Freq / sum(education_data$Freq) * 100
# Crear el gráfico de barras con porcentajes usando ggplot2
ggplot(education_data, aes(x = Var1, y = Freq, label = paste0(round(Percentage, 1), "%"))) +
geom_bar(stat = "identity", fill = "turquoise") +
geom_text(size = 3, position = position_stack(vjust = 0.5), color = "black") +
ggtitle("Gráfico de Barras de Education") +
xlab("Nivel de Educación") +
ylab("Frecuencia")
# Calcular los porcentajes de frecuencia de cada ciudad
library(ggplot2)
city_data <- as.data.frame(table(datos$City))
city_data$Percentage <- city_data$Freq / sum(city_data$Freq) * 100
# Crear el gráfico de barras con porcentajes usando ggplot2
ggplot(city_data, aes(x = reorder(Var1, -Freq), y = Freq, label = paste0(round(Percentage, 1), "%"))) +
geom_bar(stat = "identity", fill = "cadetblue") +
geom_text(size = 3, position = position_stack(vjust = 0.5), color = "black") +
ggtitle("Gráfico de Barras de City") +
xlab("Ciudad") +
ylab("Frecuencia") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotating x-axis labels for better visibility
# Calcular los porcentajes de frecuencia de cada género
library(ggplot2)
gender_data <- as.data.frame(table(datos$Gender))
gender_data$Percentage <- gender_data$Freq / sum(gender_data$Freq) * 100
# Crear el gráfico de barras con porcentajes usando ggplot2
ggplot(gender_data, aes(x = Var1, y = Freq, label = paste0(round(Percentage, 1), "%"))) +
geom_bar(stat = "identity", fill = "orchid") +
geom_text(size = 3, position = position_stack(vjust = 0.5), color = "black") +
ggtitle("Gráfico de Barras de Gender") +
xlab("Género") +
ylab("Frecuencia")
# Calcular los porcentajes de frecuencia de cada categoría de EverBenched
library(ggplot2)
everbenched_data <- as.data.frame(table(datos$EverBenched))
everbenched_data$Percentage <- everbenched_data$Freq / sum(everbenched_data$Freq) * 100
# Crear el gráfico de barras con porcentajes usando ggplot2
ggplot(everbenched_data, aes(x = Var1, y = Freq, label = paste0(round(Percentage, 1), "%"))) +
geom_bar(stat = "identity", fill = "lightcoral") +
geom_text(size = 3, position = position_stack(vjust = 0.5), color = "black") +
ggtitle("Gráfico de Barras de EverBenched") +
xlab("Ha Sido Bencheado") +
ylab("Frecuencia")
# Install GGally if it's not already installed
if (!require("GGally")) install.packages("GGally", dependencies = TRUE)
# Load the necessary libraries
library(ggplot2)
library(GGally)
# Converting 'LeaveOrNot' to a factor if it's not already
datos$LeaveOrNot <- as.factor(datos$LeaveOrNot)
# Optionally, convert other categorical variables
datos$PaymentTier <- as.factor(datos$PaymentTier)
# Now, subset the dataset with the required variables
selected_variables <- datos[, c("Age", "JoiningYear", "ExperienceInCurrentDomain", "PaymentTier", "LeaveOrNot")]
# Install corrplot if it's not already installed
if (!require("corrplot")) install.packages("corrplot", dependencies = TRUE)
# Load the library
library(corrplot)
# Creating the pairplot using GGally
library(GGally)
ggpairs(selected_variables, aes(color = LeaveOrNot),
lower = list(continuous = wrap("points", alpha = 0.5, size = 1)),
diag = list(continuous = wrap("barDiag")),
upper = list(continuous = wrap("cor", size = 3)),
title = "Pairplot with LeaveOrNot as Hue")
# Subsetting the dataset to include only numerical variables
numerical_data <- datos[sapply(datos, is.numeric)]
# Calculating the correlation matrix
cor_matrix <- cor(numerical_data, use="pairwise.complete.obs")  # Handling missing values by considering complete cases
# Display the correlation matrix
cor_matrix
# Visualizing the correlation matrix
corrplot(cor_matrix, method="circle", type="upper", order="hclust",
tl.col="black", tl.srt=45)  # Rotate labels for better readability
#install.packages("ggplot2")
#install.packages("conflicted")
# Cargamos las librerias necesarias
library(conflicted)
library(tidyverse)
library(ggplot2)
library(reshape2)
# CARGAMOS LOS DATOS
df <- datos
cor_matrix <- cor(df[, sapply(df, is.numeric)])
cor_matrix
hot_matrix <- melt(cor_matrix)
ggplot(hot_matrix, aes(Var1, Var2, fill=value)) +
geom_tile(color="white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint=0, limit=c(-1,1), space="Lab",
name="Pearson\nCorrelation") +
geom_text(aes(Var1, Var2, label = round(value, 2)), color = "black", size = 3) +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1)) +
coord_fixed()
ggplot(df, aes(x=LeaveOrNot, y=Age, fill=LeaveOrNot)) +
geom_boxplot() +
labs(title = "Boxplot of Age by LeaveOrNot", x = "LeaveOrNot", y = "Age")
ggplot(df, aes(x=LeaveOrNot, y=ExperienceInCurrentDomain, fill=LeaveOrNot)) +
geom_boxplot() +
labs(title = "Boxplot of ExperienceInCurrentDomain by LeaveOrNot", x = "LeaveOrNot", y = "ExperienceInCurrentDomain")
ggplot(data = df, aes(x = City, fill = factor(LeaveOrNot))) +  # Define las variables para el eje X y el color
geom_bar(position = "dodge", stat = "count") +  # Crea barras separadas para cada grupo en LeaveOrNot
labs(title = "Relación entre Ciudad y Dejar la Empresa",
x = "Ciudad",
y = "Número de Empleados",
fill = "Dejar la Empresa") +  # Personaliza las etiquetas y título
theme_minimal()
ggplot(data = df, aes(x = Gender, fill = factor(LeaveOrNot))) +  # Define las variables para el eje X y el color
geom_bar(position = "dodge", stat = "count") +  # Crea barras separadas para cada grupo en LeaveOrNot
labs(title = "Relación entre Genero y Dejar la Empresa",
x = "Gender",
y = "Número de Empleados",
fill = "Dejar la Empresa") +  # Personaliza las etiquetas y título
theme_minimal()
ggplot(data = df, aes(x = Education, fill = factor(LeaveOrNot))) +  # Define las variables para el eje X y el color
geom_bar(position = "dodge", stat = "count") +  # Crea barras separadas para cada grupo en LeaveOrNot
labs(title = "Relación entre Nivel de Educacion y Dejar la Empresa",
x = "Education",
y = "Número de Empleados",
fill = "Dejar la Empresa") +  # Personaliza las etiquetas y título
theme_minimal()
# PRUEBA DE CHI-CUADRADO PARA CIUDAD
city_table <- table(df$City, df$LeaveOrNot)
city_table
CH2_CITY <- chisq.test(city_table)
CH2_CITY
# PRUEBA DE CHI-CUADRADO PARA GENERO
gender_table <- table(df$Gender, df$LeaveOrNot)
gender_table
CH2_GENDER <- chisq.test(gender_table)
CH2_GENDER
# PRUEBA DE CHI-CUADRADO PARA EDUCACION
education_table <- table(df$Education, df$LeaveOrNot)
education_table
CH2_EDUCATION <- chisq.test(education_table)
CH2_EDUCATION
