source("C:/Users/danie/Github/ProyectoR/statistics.R", echo=TRUE)
View(datos)
knitr::opts_chunk$set(echo = TRUE)
url <- "https://raw.githubusercontent.com/chelocoder/ProyectoR/main/Employee.csv"
datos <- read.csv(url)
head(datos)
```{r unique-character-values, results='markup'}
url <- "https://raw.githubusercontent.com/chelocoder/ProyectoR/main/Employee.csv"
datos <- read.csv(url)
head(datos)
# Identifying character variables
char_vars <- sapply(datos, class) == "character"
# Extracting unique values for each character variable
unique_values <- lapply(datos[, char_vars, drop = FALSE], unique)
# Displaying the unique values
unique_values
# Identificando variables numéricas
numeric_vars <- sapply(datos, function(x) is.numeric(x) || is.integer(x))
numeric_variables <- names(datos)[numeric_vars]
# Identificando variables categóricas
categorical_vars <- sapply(datos, function(x) is.factor(x) || is.character(x) || is.logical(x))
categorical_variables <- names(datos)[categorical_vars]
# Mostrando las variables numéricas y categóricas
list(numeric = numeric_variables, categorical = categorical_variables)
# Cargar la librería ggplot2
library(ggplot2)
# Crear un histograma usando ggplot2
ggplot(datos, aes(x = Age)) +
geom_histogram(binwidth = 1, fill="blue", color="black") +
ggtitle("Histograma de Age") +
xlab("Edad") +
ylab("Frecuencia")
# Identifying character variables
char_vars <- sapply(datos, class) == "character"
# Extracting unique values for each character variable
unique_values <- lapply(datos[, char_vars, drop = FALSE], unique)
# Displaying the unique values
unique_values
# Cargar la librería ggplot2
library(ggplot2)
# Crear un data frame con los conteos de cada año
joining_year_data <- as.data.frame(table(datos$JoiningYear))
# Crear el gráfico de barras usando ggplot2
ggplot(joining_year_data, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity", fill = "skyblue") +
ggtitle("Gráfico de Barras de JoiningYear") +
xlab("Año de Ingreso") +
ylab("Frecuencia")
summary(datos)
# Cargar la librería ggplot2
library(ggplot2)
# Crear un data frame con los conteos de cada categoría de PaymentTier
payment_tier_data <- as.data.frame(table(datos$PaymentTier))
# Crear el gráfico de barras usando ggplot2
ggplot(payment_tier_data, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity", fill = "coral") +
ggtitle("Gráfico de Barras de PaymentTier") +
xlab("Tier de Pago") +
ylab("Frecuencia")
# Cargar la librería ggplot2
library(ggplot2)
# Crear un data frame con los conteos de cada valor de ExperienceInCurrentDomain
experience_data <- as.data.frame(table(datos$ExperienceInCurrentDomain))
# Crear el gráfico de barras usando ggplot2
ggplot(experience_data, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity", fill = "lightblue") +
ggtitle("Gráfico de Barras de ExperienceInCurrentDomain") +
xlab("Años de Experiencia en el Dominio Actual") +
ylab("Frecuencia")
# Cargar la librería ggplot2
library(ggplot2)
# Crear un data frame con los conteos de cada categoría de LeaveOrNot
leave_data <- as.data.frame(table(datos$LeaveOrNot))
# Crear el gráfico de barras usando ggplot2
ggplot(leave_data, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity", fill = "salmon") +
ggtitle("Gráfico de Barras de LeaveOrNot") +
xlab("Decisión") +
ylab("Frecuencia")
# Cargar la librería ggplot2
library(ggplot2)
# Creando un box plot usando ggplot2
ggplot(datos, aes(y = Age)) +
geom_boxplot(fill = "lightgreen") +
ggtitle("Box Plot de Age") +
ylab("Edad")
# Conteo de datos faltantes en cada columna
missing_data_counts <- sapply(datos, function(x) sum(is.na(x)))
# Mostrando el conteo de datos faltantes
missing_data_counts
# Cargar la librería ggplot2
library(ggplot2)
# Crear un data frame con los conteos de cada categoría de Education
education_data <- as.data.frame(table(datos$Education))
# Crear el gráfico de barras usando ggplot2
ggplot(education_data, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity", fill = "turquoise") +
ggtitle("Gráfico de Barras de Education") +
xlab("Nivel de Educación") +
ylab("Frecuencia")
# Cargar la librería ggplot2
library(ggplot2)
# Crear un data frame con los conteos de cada ciudad
city_data <- as.data.frame(table(datos$City))
# Crear el gráfico de barras usando ggplot2
ggplot(city_data, aes(x = reorder(Var1, -Freq), y = Freq)) +
geom_bar(stat = "identity", fill = "cadetblue") +
ggtitle("Gráfico de Barras de City") +
xlab("Ciudad") +
ylab("Frecuencia") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotating x-axis labels for better visibility
# Cargar la librería ggplot2
library(ggplot2)
# Crear un data frame con los conteos de cada género
gender_data <- as.data.frame(table(datos$Gender))
# Crear el gráfico de barras usando ggplot2
ggplot(gender_data, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity", fill = "orchid") +
ggtitle("Gráfico de Barras de Gender") +
xlab("Género") +
ylab("Frecuencia")
# Cargar la librería ggplot2
library(ggplot2)
# Crear un data frame con los conteos de cada categoría de EverBenched
everbenched_data <- as.data.frame(table(datos$EverBenched))
# Crear el gráfico de barras usando ggplot2
ggplot(everbenched_data, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity", fill = "lightcoral") +
ggtitle("Gráfico de Barras de EverBenched") +
xlab("Ha Sido Bencheado") +
ylab("Frecuencia")
# Install GGally if it's not already installed
if (!require("GGally")) install.packages("GGally", dependencies = TRUE)
# Load the necessary libraries
library(ggplot2)
library(GGally)
knitr::opts_chunk$set(echo = TRUE)
# Selecting variables to include in the pairplot
# Adjust the selection as necessary to include the variables you're interested in
selected_variables <- datos[, c("LeaveOrNot", "Age", "ExperienceInCurrentDomain", "PaymentTier")]  # Example variable names
# Creating the pairplot
ggpairs(selected_variables)
knitr::opts_chunk$set(echo = TRUE)
# Selecting variables to include in the pairplot
# Adjust the selection as necessary to include the variables you're interested in
selected_variables <- datos[, c("LeaveOrNot", "Age", "JoiningYear" , "ExperienceInCurrentDomain", "PaymentTier")]  # Example variable names
# Creating the pairplot
ggpairs(selected_variables)
knitr::opts_chunk$set(echo = TRUE)
# Install corrplot if it's not already installed
if (!require("corrplot")) install.packages("corrplot", dependencies = TRUE)
# Load the library
library(corrplot)
# Install corrplot if it's not already installed
if (!require("corrplot")) install.packages("corrplot", dependencies = TRUE)
# Load the library
library(corrplot)
# Subsetting the dataset to include only numerical variables
numerical_data <- datos[sapply(datos, is.numeric)]
# Calculating the correlation matrix
cor_matrix <- cor(numerical_data, use="pairwise.complete.obs")  # Handling missing values by considering complete cases
# Display the correlation matrix
cor_matrix
knitr::opts_chunk$set(echo = TRUE)
# Visualizing the correlation matrix
corrplot(cor_matrix, method="circle", type="upper", order="hclust",
tl.col="black", tl.srt=45)  # Rotate labels for better readability
knitr::opts_chunk$set(echo = TRUE)
# Subsetting the dataset to include only the specified variables and the hue
selected_variables <- datos[, c("Age", "JoiningYear", "ExperienceInCurrentDomain", "PaymentTier", "LeaveOrNot")]
# Creating the pairplot using GGally
ggpairs(selected_variables, aes(color = LeaveOrNot),
lower = list(continuous = "smooth", combo = "box"),
diag = list(continuous = "barDiag"),
upper = list(continuous = "cor"),
title = "Pairplot with LeaveOrNot as Hue")
knitr::opts_chunk$set(echo = TRUE)
# Converting 'LeaveOrNot' to a factor if it's not already
datos$LeaveOrNot <- as.factor(datos$LeaveOrNot)
# Optionally, convert other categorical variables
datos$PaymentTier <- as.factor(datos$PaymentTier)
# Now, subset the dataset with the required variables
selected_variables <- datos[, c("Age", "JoiningYear", "ExperienceInCurrentDomain", "PaymentTier", "LeaveOrNot")]
knitr::opts_chunk$set(echo = TRUE)
# Creating the pairplot using GGally
ggpairs(selected_variables, aes(color = LeaveOrNot),
lower = list(continuous = wrap("points", alpha = 0.5, size = 1)),
diag = list(continuous = wrap("barDiag")),
upper = list(continuous = wrap("cor", size = 3)),
title = "Pairplot with LeaveOrNot as Hue")
knitr::opts_chunk$set(echo = TRUE)
# Converting 'LeaveOrNot' to a factor if it's not already
datos$LeaveOrNot <- as.factor(datos$LeaveOrNot)
# Optionally, convert other categorical variables
datos$PaymentTier <- as.factor(datos$PaymentTier)
# Now, subset the dataset with the required variables
selected_variables <- datos[, c("Age", "JoiningYear", "ExperienceInCurrentDomain", "PaymentTier")]
# Converting 'LeaveOrNot' to a factor if it's not already
datos$LeaveOrNot <- as.factor(datos$LeaveOrNot)
# Optionally, convert other categorical variables
datos$PaymentTier <- as.factor(datos$PaymentTier)
# Now, subset the dataset with the required variables
selected_variables <- datos[, c("Age", "JoiningYear", "ExperienceInCurrentDomain", "PaymentTier")]
# Creating the pairplot using GGally
ggpairs(selected_variables, aes(color = LeaveOrNot),
lower = list(continuous = wrap("points", alpha = 0.5, size = 1)),
diag = list(continuous = wrap("barDiag")),
upper = list(continuous = wrap("cor", size = 3)),
title = "Pairplot with LeaveOrNot as Hue")
knitr::opts_chunk$set(echo = TRUE)
# Converting 'LeaveOrNot' to a factor if it's not already
datos$LeaveOrNot <- as.factor(datos$LeaveOrNot)
# Optionally, convert other categorical variables
datos$PaymentTier <- as.factor(datos$PaymentTier)
# Now, subset the dataset with the required variables
selected_variables <- datos[, c("Age", "JoiningYear", "ExperienceInCurrentDomain", "PaymentTier", "LeaveOrNot")]
# Creating the pairplot using GGally
ggpairs(selected_variables, aes(color = LeaveOrNot),
lower = list(continuous = wrap("points", alpha = 0.5, size = 1)),
diag = list(continuous = wrap("barDiag")),
upper = list(continuous = wrap("cor", size = 3)),
title = "Pairplot with LeaveOrNot as Hue")
knitr::opts_chunk$set(echo = TRUE)
# Creating the pairplot using GGally
ggpairs(selected_variables, aes(color = LeaveOrNot),
lower = list(continuous = wrap("points", alpha = 0.5, size = 1)),
diag = list(continuous = wrap("barDiag")),
upper = list(continuous = wrap("cor", size = 3)),
title = "Pairplot with LeaveOrNot as Hue")
# Visualizing the correlation matrix
corrplot(cor_matrix, method="circle", type="upper", order="hclust",
tl.col="black", tl.srt=45)  # Rotate labels for better readability
